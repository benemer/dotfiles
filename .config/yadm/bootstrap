

#!/bin/bash
set -e

command_exists() {
  command -v "$@" >/dev/null 2>&1
}

user_can_sudo() {
  # If sudo is available then use it, if not default to command for root enviroments
  # TODO: Add support for non root enviroments!!!
  # Adapted from https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh
  command_exists sudo || return 1
  ! LANG= sudo -n -v 2>&1 | grep -q "may not run sudo"
}

update_pkgs() {
  # This takes too much, do it once
  $RUN apt update
}

install_pkgs() {
  # Wrapper to install packages depending on sudo or non-sudo enviroments
  # if user_can_sudo; then
  # $RUN apt update && apt install --no-install-recommends -y "$@"
  # else
  # # WIP
  # apt-get download $(apt-rdepends $@ | grep -v "^ ")
  # for pkg in $.deb; do dpkg -x $pkg $HOME; done
  # fi
  $RUN apt install --no-install-recommends -y "$@"
}

install_zsh() {
  install_pkgs curl zsh
  
  export CHSH=no
  export KEEP_ZSHRC=yes
  export RUNZSH=no
  export OHMYZSH_URL=https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master
  export ZSH_CUSTOM=${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}

  # Instal oh-my-zsh always, update if already istalled
  ZSH= sh -c "$(curl -fsSL $OHMYZSH_URL/tools/install.sh)" >/dev/null || zsh -i -c "omz update"

  # If user shell is not zsh, change it (password required)
  if [ ! "$(basename "$SHELL")" = "zsh" ]; then
    RUN=$(command_exists sudo && echo "sudo" || echo "command")
    $RUN chsh -s "$(which zsh)" "$USER" 2>/dev/null || chsh -s "$(which zsh)"
  fi

  # Install zsh-autosuggestions custom plugin
  git clone --depth 1 \
    https://github.com/zsh-users/zsh-autosuggestions \
    ${ZSH_CUSTOM}/plugins/zsh-autosuggestions 2>/dev/null || true
}

install_nodejs() {
  # Do not re-install
  command_exists node && command_exists npm && return 0 || echo "Installing nodejs"

  # If we reach this poing either node or npm are not there, then install:
  curl -sL install-node.vercel.app/lts | $RUN bash -s -- --yes

  # Create non-sudo installations of nodejs packages
  mkdir -p ${HOME}/.npm-packages
  npm config set prefix ${HOME}/.npm-packages
}

install_coc_extensions() {
  mkdir -p ~/.config/coc/extensions && cd ~/.config/coc/extensions
  if [ ! -f package.json ]; then
    echo '{"dependencies":{}}' >package.json
  fi
  COC_EXTENSIONS=$(nvim --headless -c 'echo coc_global_extensions' +qa 2>&1 | awk -v RS="'" '!(NR%2)')
  echo "Installing coc extensions: ${COC_EXTENSIONS}"
  npm install $(echo $COC_EXTENSIONS) --global-style --ignore-scripts --no-bin-links --no-package-lock --only=prod
}

install_neovim() {
  curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz
  rm -rf /opt/nvim
  tar -C /opt -xzf nvim-linux64.tar.gz
  $RUN ln -s /opt/nvim-linux64/bin/nvim /usr/bin/nvim

  # Install vim-plug packages
  nvim --headless -u $HOME/.vim/config/plug.vim +PlugInstall +qall

  # Install coc-nvim plugins:
  # neovim-coc relies on nodejs, install only if not there
  install_nodejs

  # Manually install coc-extensions(https://github.com/neoclide/coc.nvim/issues/118)
  install_coc_extensions
}

install_python() {
  install_pkgs python3 python3-pip python3-dev python-is-python3
  python3 -m pip install --user --upgrade pip
  pip install ipython ipdb black
}

install_build_utils() {
  install_pkgs build-essential cmake cmake-curses-gui
}

install_cpp_utils() {
  install_pkgs clang-format clangd
}

install_shell_utils() {
  install_pkgs htop silversearcher-ag tree tig
}

install_tmux() {
  install_pkgs tmux tmuxinator
}

install_essential_tools() {
  install_pkgs git-lfs wget binutils less xdg-utils
}

install_ssh() {
  install_pkgs openssh-client openssh-server sshfs
}

install_bat() {
  wget -c https://github.com/sharkdp/bat/releases/download/v0.22.1/bat-musl_0.22.1_amd64.deb
  sudo apt install ./bat-musl_0.22.1_amd64.deb
  rm ./bat-musl_0.22.1_amd64.deb
}

install_keyd(){
  git clone https://github.com/rvaiya/keyd
  cd keyd
  make
  sudo make install
  rm -rf keyd
  sudo systemctl enable keyd
  sudo systemctl start keyd
  sudo cp .config/keyboard/keyd.conf /etc/keyd/default.conf
  sudo keyd reload
}

install_fonts(){
  mkdir -p ~/.local/share/fonts
  cd ~/.local/share/fonts
  curl -fLO https://github.com/ryanoasis/nerd-fonts/raw/HEAD/patched-fonts/DroidSansMono/DroidSansMNerdFont-Regular.otf
  fc-cache -fv
}

minimal_installation() {
  echo "Running minimal installation, just zsh, neovim, tmux, and some binutils"
  install_essential_tools
  install_zsh
  install_neovim
  install_tmux
  install_bat
  install_fonts
}

full_installation() {
  echo "[WARNING] Running full installation mode, this will take some time..."
  install_python
  install_build_utils
  install_cpp_utils
  install_shell_utils
  install_ssh
}

# Options
RUN=$(user_can_sudo && echo "sudo" || echo "command")
INSTALL_FULL=${INSTALL_FULL:-no}
DECRYPT=${DECRYPT:-yes}

main() {
  echo "Updating the yadm repo origin URL"
  yadm remote set-url origin "git@github.com:benemer/dotfiles.git"

  cd "$HOME"

  # Fetch juste once the apt repositories
  update_pkgs

  minimal_installation

  if [ $INSTALL_FULL = yes ]; then
    full_installation
  fi

  if [ $DECRYPT = yes ]; then
    echo "Loading encrypted files"
    yadm decrypt
  else
    echo "Skipping encrypted files, as requested"
  fi

}

main "$@"
